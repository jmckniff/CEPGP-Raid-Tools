<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LsonLib</name>
    </assembly>
    <members>
        <member name="T:LsonLib.LsonVars">
            <summary>
                Provides methods for handling data in the "LSON" format, consisting of variable assignments in the Lua syntax.
                Actual Lua code is not supported.</summary>
        </member>
        <member name="M:LsonLib.LsonVars.Parse(System.String)">
            <summary>Parses an LSON string and returns a dictionary of variable definitions present in the input.</summary>
        </member>
        <member name="M:LsonLib.LsonVars.ToString(System.Collections.Generic.Dictionary{System.String,LsonLib.LsonValue})">
            <summary>Converts a dictionary of variable definitions back to the LSON format, reverting <see cref="M:LsonLib.LsonVars.Parse(System.String)"/>.</summary>
        </member>
        <member name="T:LsonLib.NumericConversionOptions">
            <summary>
                Specifies the degree of strictness or leniency when converting a <see cref="T:LsonLib.LsonValue"/> to a numerical type such
                as <c>int</c> or <c>double</c>.</summary>
        </member>
        <member name="F:LsonLib.NumericConversionOptions.Strict">
            <summary>
                The conversion only succeeds if the object is a <see cref="T:LsonLib.LsonNumber"/> and its value is exactly
                representable by the target type.</summary>
        </member>
        <member name="F:LsonLib.NumericConversionOptions.AllowConversionFromString">
            <summary>The conversion succeeds if the object is a <see cref="T:LsonLib.LsonString"/> with numerical content.</summary>
        </member>
        <member name="F:LsonLib.NumericConversionOptions.AllowZeroFractionToInteger">
            <summary>
                Ignored unless <see cref="F:LsonLib.NumericConversionOptions.AllowConversionFromString"/> is also specified. A conversion to an integer type
                succeeds if the string contains a decimal followed by a zero fractional part.</summary>
        </member>
        <member name="F:LsonLib.NumericConversionOptions.AllowConversionFromBool">
            <summary>
                The conversion succeeds if the object is a <see cref="T:LsonLib.LsonBool"/>, which will convert to 0 if false and 1 if
                true.</summary>
        </member>
        <member name="F:LsonLib.NumericConversionOptions.AllowTruncation">
            <summary>
                Allows conversion of non-integral numbers to integer types by truncation (rounding towards zero). If <see cref="F:LsonLib.NumericConversionOptions.AllowConversionFromString"/> is specified, strings containing a decimal part are also converted and
                truncated when converting to an integer type.</summary>
        </member>
        <member name="F:LsonLib.NumericConversionOptions.Lenient">
            <summary>Specifies maximum leniency.</summary>
        </member>
        <member name="T:LsonLib.StringConversionOptions">
            <summary>Specifies the degree of strictness or leniency when converting a <see cref="T:LsonLib.LsonValue"/> to a <c>string</c>.</summary>
        </member>
        <member name="F:LsonLib.StringConversionOptions.Strict">
            <summary>The conversion only succeeds if the object is a <see cref="T:LsonLib.LsonString"/>.</summary>
        </member>
        <member name="F:LsonLib.StringConversionOptions.AllowConversionFromNumber">
            <summary>The conversion succeeds if the object is a <see cref="T:LsonLib.LsonNumber"/>.</summary>
        </member>
        <member name="F:LsonLib.StringConversionOptions.AllowConversionFromBool">
            <summary>The conversion succeeds if the object is a <see cref="T:LsonLib.LsonBool"/>.</summary>
        </member>
        <member name="F:LsonLib.StringConversionOptions.Lenient">
            <summary>Specifies maximum leniency.</summary>
        </member>
        <member name="T:LsonLib.BoolConversionOptions">
            <summary>Specifies the degree of strictness or leniency when converting a <see cref="T:LsonLib.LsonValue"/> to a <c>bool</c>.</summary>
        </member>
        <member name="F:LsonLib.BoolConversionOptions.Strict">
            <summary>The conversion only succeeds if the object is a <see cref="T:LsonLib.LsonBool"/>.</summary>
        </member>
        <member name="F:LsonLib.BoolConversionOptions.AllowConversionFromNumber">
            <summary>
                The conversion succeeds if the object is a <see cref="T:LsonLib.LsonNumber"/>. 0 (zero) is converted to false, all other
                values to true.</summary>
        </member>
        <member name="F:LsonLib.BoolConversionOptions.AllowConversionFromString">
            <summary>
                The conversion succeeds if the object is a <see cref="T:LsonLib.LsonString"/> with specific content. The set of
                permissible strings is controlled by <see cref="F:LsonLib.LsonString.True"/>, <see cref="F:LsonLib.LsonString.False"/> and <see cref="F:LsonLib.LsonString.TrueFalseComparer"/>.</summary>
        </member>
        <member name="F:LsonLib.BoolConversionOptions.Lenient">
            <summary>Specifies maximum leniency.</summary>
        </member>
        <member name="T:LsonLib.LsonParseException">
            <summary>Represents a LSON parsing exception.</summary>
        </member>
        <member name="P:LsonLib.LsonParseException.Line">
            <summary>Gets the line number at which the parse error occurred.</summary>
        </member>
        <member name="P:LsonLib.LsonParseException.Column">
            <summary>Gets the column number at which the parse error occurred.</summary>
        </member>
        <member name="P:LsonLib.LsonParseException.Index">
            <summary>Gets the character index at which the parse error occurred.</summary>
        </member>
        <member name="P:LsonLib.LsonParseException.Snippet">
            <summary>A snippet of the LSON string at which the parse error occurred.</summary>
        </member>
        <member name="T:LsonLib.LsonParserState">
            <summary>Keeps track of the LSON parser state.</summary>
        </member>
        <member name="T:LsonLib.LsonValue">
            <summary>Encapsulates a LSON value (e.g. a boolean, a number, a string, a dictionary, etc.)</summary>
        </member>
        <member name="M:LsonLib.LsonValue.Parse(System.String)">
            <summary>
                Parses the specified string into a LSON value.</summary>
            <param name="lsonValue">
                A string containing LSON syntax.</param>
            <returns>
                A <see cref="T:LsonLib.LsonValue"/> instance representing the value.</returns>
        </member>
        <member name="M:LsonLib.LsonValue.TryParse(System.String,LsonLib.LsonValue@)">
            <summary>
                Attempts to parse the specified string into a LSON value.</summary>
            <param name="lsonValue">
                A string containing LSON syntax.</param>
            <param name="result">
                Receives the <see cref="T:LsonLib.LsonValue"/> representing the value, or null if unsuccessful. (But note that null is
                also a possible valid value in case of success.)</param>
            <returns>
                True if parsing was successful; otherwise, false.</returns>
        </member>
        <member name="M:LsonLib.LsonValue.op_Implicit(System.String)~LsonLib.LsonValue">
            <summary>Constructs a <see cref="T:LsonLib.LsonValue"/> from the specified string.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Implicit(System.Boolean)~LsonLib.LsonValue">
            <summary>Constructs a <see cref="T:LsonLib.LsonValue"/> from the specified boolean.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Implicit(System.Nullable{System.Boolean})~LsonLib.LsonValue">
            <summary>Constructs a <see cref="T:LsonLib.LsonValue"/> from the specified nullable boolean.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Implicit(System.Double)~LsonLib.LsonValue">
            <summary>Constructs a <see cref="T:LsonLib.LsonValue"/> from the specified double.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Implicit(System.Nullable{System.Double})~LsonLib.LsonValue">
            <summary>Constructs a <see cref="T:LsonLib.LsonValue"/> from the specified nullable double.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Implicit(System.Decimal)~LsonLib.LsonValue">
            <summary>Constructs a <see cref="T:LsonLib.LsonValue"/> from the specified decimal.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Implicit(System.Nullable{System.Decimal})~LsonLib.LsonValue">
            <summary>Constructs a <see cref="T:LsonLib.LsonValue"/> from the specified nullable decimal.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Implicit(System.Int64)~LsonLib.LsonValue">
            <summary>Constructs a <see cref="T:LsonLib.LsonValue"/> from the specified long.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Implicit(System.Nullable{System.Int64})~LsonLib.LsonValue">
            <summary>Constructs a <see cref="T:LsonLib.LsonValue"/> from the specified nullable long.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Implicit(System.Int32)~LsonLib.LsonValue">
            <summary>Constructs a <see cref="T:LsonLib.LsonValue"/> from the specified int.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Implicit(System.Nullable{System.Int32})~LsonLib.LsonValue">
            <summary>Constructs a <see cref="T:LsonLib.LsonValue"/> from the specified nullable int.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Explicit(LsonLib.LsonValue)~System.String">
            <summary>See <see cref="F:LsonLib.StringConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Explicit(LsonLib.LsonValue)~System.Boolean">
            <summary>See <see cref="F:LsonLib.BoolConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Explicit(LsonLib.LsonValue)~System.Nullable{System.Boolean}">
            <summary>See <see cref="F:LsonLib.BoolConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Explicit(LsonLib.LsonValue)~System.Double">
            <summary>See <see cref="F:LsonLib.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Explicit(LsonLib.LsonValue)~System.Nullable{System.Double}">
            <summary>See <see cref="F:LsonLib.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Explicit(LsonLib.LsonValue)~System.Decimal">
            <summary>See <see cref="F:LsonLib.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Explicit(LsonLib.LsonValue)~System.Nullable{System.Decimal}">
            <summary>See <see cref="F:LsonLib.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Explicit(LsonLib.LsonValue)~System.Int64">
            <summary>See <see cref="F:LsonLib.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Explicit(LsonLib.LsonValue)~System.Nullable{System.Int64}">
            <summary>See <see cref="F:LsonLib.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Explicit(LsonLib.LsonValue)~System.Int32">
            <summary>See <see cref="F:LsonLib.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.op_Explicit(LsonLib.LsonValue)~System.Nullable{System.Int32}">
            <summary>See <see cref="F:LsonLib.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetDict">
            <summary>
                Converts the current value to <see cref="T:LsonLib.LsonDict"/> if it is a <see cref="T:LsonLib.LsonDict"/>; otherwise, throws.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetDictSafe">
            <summary>
                Converts the current value to <see cref="T:LsonLib.LsonDict"/> if it is a <see cref="T:LsonLib.LsonDict"/>; otherwise, returns
                null.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.getDict(System.Boolean)">
            <summary>
                Converts the current value to <see cref="T:LsonLib.LsonDict"/>.</summary>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonValue.GetString(LsonLib.StringConversionOptions)">
            <summary>Converts the current value to a <c>string</c>. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetStringLenient">
            <summary>
                Converts the current value to a <c>string</c> by using the <see cref="F:LsonLib.StringConversionOptions.Lenient"/>
                option. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetStringSafe(LsonLib.StringConversionOptions)">
            <summary>Converts the current value to a <c>string</c>. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetStringLenientSafe">
            <summary>
                Converts the current value to a <c>string</c> by using the <see cref="F:LsonLib.StringConversionOptions.Lenient"/>
                option. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.getString(LsonLib.StringConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>string</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonValue.GetBool(LsonLib.BoolConversionOptions)">
            <summary>Converts the current value to a <c>bool</c>. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetBoolLenient">
            <summary>
                Converts the current value to a <c>bool</c> by using the <see cref="F:LsonLib.BoolConversionOptions.Lenient"/> option.
                Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetBoolSafe(LsonLib.BoolConversionOptions)">
            <summary>Converts the current value to a <c>bool</c>. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetBoolLenientSafe">
            <summary>
                Converts the current value to a <c>bool</c> by using the <see cref="F:LsonLib.BoolConversionOptions.Lenient"/> option.
                Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.getBool(LsonLib.BoolConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>bool</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonValue.GetDouble(LsonLib.NumericConversionOptions)">
            <summary>Converts the current value to a <c>double</c>. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetDoubleLenient">
            <summary>
                Converts the current value to a <c>double</c> by using the <see cref="F:LsonLib.NumericConversionOptions.Lenient"/>
                option. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetDoubleSafe(LsonLib.NumericConversionOptions)">
            <summary>Converts the current value to a <c>double</c>. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetDoubleLenientSafe">
            <summary>
                Converts the current value to a <c>double</c> by using the <see cref="F:LsonLib.NumericConversionOptions.Lenient"/>
                option. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.getDouble(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>double</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonValue.GetDecimal(LsonLib.NumericConversionOptions)">
            <summary>Converts the current value to a <c>decimal</c>. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetDecimalLenient">
            <summary>
                Converts the current value to a <c>decimal</c> by using the <see cref="F:LsonLib.NumericConversionOptions.Lenient"/>
                option. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetDecimalSafe(LsonLib.NumericConversionOptions)">
            <summary>Converts the current value to a <c>decimal</c>. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetDecimalLenientSafe">
            <summary>
                Converts the current value to a <c>decimal</c> by using the <see cref="F:LsonLib.NumericConversionOptions.Lenient"/>
                option. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.getDecimal(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>decimal</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonValue.GetLong(LsonLib.NumericConversionOptions)">
            <summary>Converts the current value to a <c>long</c>. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetLongLenient">
            <summary>
                Converts the current value to a <c>long</c> by using the <see cref="F:LsonLib.NumericConversionOptions.Lenient"/>
                option. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetLongSafe(LsonLib.NumericConversionOptions)">
            <summary>Converts the current value to a <c>long</c>. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetLongLenientSafe">
            <summary>
                Converts the current value to a <c>long</c> by using the <see cref="F:LsonLib.NumericConversionOptions.Lenient"/>
                option. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.getLong(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>long</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonValue.GetInt(LsonLib.NumericConversionOptions)">
            <summary>Converts the current value to an <c>int</c>. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetIntLenient">
            <summary>
                Converts the current value to an <c>int</c> by using the <see cref="F:LsonLib.NumericConversionOptions.Lenient"/>
                option. Throws if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetIntSafe(LsonLib.NumericConversionOptions)">
            <summary>Converts the current value to an <c>int</c>. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.GetIntLenientSafe">
            <summary>
                Converts the current value to an <c>int</c> by using the <see cref="F:LsonLib.NumericConversionOptions.Lenient"/>
                option. Returns null if the conversion is not valid.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.getInt(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>int</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonValue.Clear">
            <summary>Removes all items from the current value if it is an <see cref="T:LsonLib.LsonDict"/>; otherwise, throws.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.TryGetValue(LsonLib.LsonValue,LsonLib.LsonValue@)">
            <summary>
                Attempts to retrieve the value associated with the specified <paramref name="key"/> if this is a <see cref="T:LsonLib.LsonDict"/>; otherwise, throws.</summary>
            <param name="key">
                The key for which to try to retrieve the value.</param>
            <param name="value">
                Receives the value associated with the specified <paramref name="key"/>, or null if the key is not in the
                dictionary. (Note that null may also be a valid value in case of success.)</param>
            <returns>
                True if the key was in the dictionary; otherwise, false.</returns>
        </member>
        <member name="M:LsonLib.LsonValue.Add(LsonLib.LsonValue,LsonLib.LsonValue)">
            <summary>
                Adds the specified key/value pair to the dictionary if this is a <see cref="T:LsonLib.LsonDict"/>; otherwise, throws.</summary>
            <param name="key">
                The key to add.</param>
            <param name="value">
                The value to add.</param>
        </member>
        <member name="M:LsonLib.LsonValue.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{LsonLib.LsonValue,LsonLib.LsonValue}})">
            <summary>
                Add the specified <paramref name="items"/> to the current dictionary if it is a <see cref="T:LsonLib.LsonDict"/>;
                otherwise, throws.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.Remove(LsonLib.LsonValue)">
            <summary>
                Removes the entry with the specified <paramref name="key"/> from the dictionary if this is a <see cref="T:LsonLib.LsonDict"/>; otherwise, throws.</summary>
            <param name="key">
                The key that identifies the entry to remove.</param>
            <returns>
                True if an entry was removed; false if the key wasn’t in the dictionary.</returns>
        </member>
        <member name="M:LsonLib.LsonValue.ContainsKey(LsonLib.LsonValue)">
            <summary>
                Determines whether an entry with the specified <paramref name="key"/> exists in the dictionary if this is a
                <see cref="T:LsonLib.LsonDict"/>; otherwise, throws.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.Equals(System.Object)">
            <summary>
                Determines whether this value is equal to the <paramref name="other"/> value. (See also remarks in the other
                overload, <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.)</summary>
        </member>
        <member name="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)">
            <summary>
                Determines whether this value is equal to the <paramref name="other"/> value. (See also remarks.)</summary>
            <remarks>
                Two values are only considered equal if they are of the same type (e.g. a <see cref="T:LsonLib.LsonString"/> is never
                equal to a <see cref="T:LsonLib.LsonNumber"/> even if they contain the same number). Dictionaries are equal if they
                contain the same set of key/value pairs.</remarks>
        </member>
        <member name="M:LsonLib.LsonValue.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.ToString(LsonLib.LsonValue)">
            <summary>Converts the LSON value to a LSON string that parses back to this value. Supports null values.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.ToString">
            <summary>Converts the current LSON value to a LSON string that parses back to this value.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.ToStringIndented(LsonLib.LsonValue)">
            <summary>Converts the LSON value to a LSON string that parses back to this value. Supports null values.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.ToStringIndented">
            <summary>Converts the current LSON value to a LSON string that parses back to this value.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.AppendIndented(LsonLib.LsonValue,System.Text.StringBuilder,System.Int32)">
            <summary>
                Converts the LSON value to a LSON string that parses back to this value and places the string into the
                specified StringBuilder. Supports null values.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.AppendIndented(System.Text.StringBuilder,System.Int32)">
            <summary>
                Converts the current LSON value to a LSON void that parses back to this value and places the string into the
                specified StringBuilder.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.ToEnumerable(LsonLib.LsonValue)">
            <summary>Lazy-converts the LSON value to a LSON string that parses back to this value. Supports null values.</summary>
        </member>
        <member name="M:LsonLib.LsonValue.ToEnumerable">
            <summary>Lazy-converts the current LSON value to a LSON string that parses back to this value.</summary>
        </member>
        <member name="P:LsonLib.LsonValue.Safe">
            <summary>
                Returns an object that allows safe access to the indexers. “Safe” in this context means that the indexers,
                when given an index or key not found in the dictionary, do not throw but instead return <see cref="P:LsonLib.LsonNoValue.Instance"/> whose getters (such as <see cref="M:LsonLib.LsonValue.GetString(LsonLib.StringConversionOptions)"/>) return null.</summary>
        </member>
        <member name="P:LsonLib.LsonValue.Count">
            <summary>Returns the number of items in the current value if it is an <see cref="T:LsonLib.LsonDict"/>; otherwise, throws.</summary>
        </member>
        <member name="P:LsonLib.LsonValue.IsContainer">
            <summary>Returns true if this value is an <see cref="T:LsonLib.LsonDict"/>; otherwise, returns false.</summary>
        </member>
        <member name="P:LsonLib.LsonValue.Item(LsonLib.LsonValue)">
            <summary>
                Gets or sets the value associated with the specified <paramref name="key"/> if this value is a <see cref="T:LsonLib.LsonDict"/>; otherwise, throws.</summary>
        </member>
        <member name="P:LsonLib.LsonValue.Keys">
            <summary>Returns the keys contained in the dictionary if this is a <see cref="T:LsonLib.LsonDict"/>; otherwise, throws.</summary>
        </member>
        <member name="P:LsonLib.LsonValue.Values">
            <summary>Returns the values contained in the dictionary if this is a <see cref="T:LsonLib.LsonDict"/>; otherwise, throws.</summary>
        </member>
        <member name="T:LsonLib.LsonDict">
            <summary>Encapsulates a LSON dictionary (a set of key/value pairs).</summary>
        </member>
        <member name="M:LsonLib.LsonDict.#ctor">
            <summary>Constructs an empty dictionary.</summary>
        </member>
        <member name="M:LsonLib.LsonDict.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{LsonLib.LsonValue,LsonLib.LsonValue}})">
            <summary>Constructs a dictionary containing a copy of the specified collection of key/value pairs.</summary>
        </member>
        <member name="M:LsonLib.LsonDict.Parse(System.String)">
            <summary>
                Parses the specified LSON as a LSON dictionary. All other types of LSON values result in a <see cref="T:LsonLib.LsonParseException"/>.</summary>
            <param name="lsonDict">
                LSON syntax to parse.</param>
        </member>
        <member name="M:LsonLib.LsonDict.TryParse(System.String,LsonLib.LsonDict@)">
            <summary>
                Attempts to parse the specified string into a LSON dictionary.</summary>
            <param name="lsonDict">
                A string containing LSON syntax.</param>
            <param name="result">
                Receives the <see cref="T:LsonLib.LsonDict"/> representing the dictionary, or null if unsuccessful.</param>
            <returns>
                True if parsing was successful; otherwise, false.</returns>
        </member>
        <member name="M:LsonLib.LsonDict.getDict(System.Boolean)">
            <summary>
                Converts the current value to <see cref="T:LsonLib.LsonDict"/>.</summary>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonDict.GetEnumerator">
            <summary>Enumerates the key/value pairs in this dictionary.</summary>
        </member>
        <member name="M:LsonLib.LsonDict.Equals(System.Object)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonDict.Equals(LsonLib.LsonValue)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonDict.Equals(LsonLib.LsonDict)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonDict.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:LsonLib.LsonDict.ToEnumerable">
            <summary>See <see cref="M:LsonLib.LsonValue.ToEnumerable"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonDict.AppendIndented(System.Text.StringBuilder,System.Int32)">
            <summary>Converts the LSON value to a LSON string that parses back to this value. Supports null values.</summary>
        </member>
        <member name="M:LsonLib.LsonDict.Clear">
            <summary>Removes all items from the current dictionary.</summary>
        </member>
        <member name="M:LsonLib.LsonDict.TryGetValue(LsonLib.LsonValue,LsonLib.LsonValue@)">
            <summary>
                Attempts to retrieve the value associated with the specified <paramref name="key"/>.</summary>
            <param name="key">
                The key for which to try to retrieve the value.</param>
            <param name="value">
                Receives the value associated with the specified <paramref name="key"/>, or null if the key is not in the
                dictionary. (Note that null may also be a valid value in case of success.)</param>
            <returns>
                True if the key was in the dictionary; otherwise, false.</returns>
        </member>
        <member name="M:LsonLib.LsonDict.Add(LsonLib.LsonValue,LsonLib.LsonValue)">
            <summary>
                Adds the specified key/value pair to the dictionary.</summary>
            <param name="key">
                The key to add.</param>
            <param name="value">
                The value to add.</param>
        </member>
        <member name="M:LsonLib.LsonDict.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{LsonLib.LsonValue,LsonLib.LsonValue}})">
            <summary>Adds the specified key/value pairs to the dictionary.</summary>
        </member>
        <member name="M:LsonLib.LsonDict.Remove(LsonLib.LsonValue)">
            <summary>
                Removes the entry with the specified <paramref name="key"/> from the dictionary.</summary>
            <param name="key">
                The key that identifies the entry to remove.</param>
            <returns>
                True if an entry was removed; false if the key wasn’t in the dictionary.</returns>
        </member>
        <member name="M:LsonLib.LsonDict.ContainsKey(LsonLib.LsonValue)">
            <summary>Determines whether an entry with the specified <paramref name="key"/> exists in the dictionary.</summary>
        </member>
        <member name="M:LsonLib.LsonDict.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
                Implements functionality that allows the keys in this LSON dictionary to be accessed as dynamic members.</summary>
            <example>
                <code>
                    dynamic dict = LsonDict.Parse(@"{ [""Foo""] = "abc" }");
                    Console.WriteLine(dict.Foo);     // outputs "abc"</code></example>
        </member>
        <member name="P:LsonLib.LsonDict.Count">
            <summary>Returns the number of items in the current dictionary.</summary>
        </member>
        <member name="P:LsonLib.LsonDict.IsContainer">
            <summary>Returns true.</summary>
        </member>
        <member name="P:LsonLib.LsonDict.Item(LsonLib.LsonValue)">
            <summary>Gets or sets the value associated with the specified <paramref name="key"/>.</summary>
        </member>
        <member name="P:LsonLib.LsonDict.Keys">
            <summary>Returns the keys contained in the dictionary.</summary>
        </member>
        <member name="P:LsonLib.LsonDict.Values">
            <summary>Returns the values contained in the dictionary.</summary>
        </member>
        <member name="T:LsonLib.LsonString">
            <summary>Encapsulates a string as a LSON value.</summary>
        </member>
        <member name="M:LsonLib.LsonString.#ctor(System.String)">
            <summary>Constructs a <see cref="T:LsonLib.LsonString"/> instance from the specified string.</summary>
        </member>
        <member name="M:LsonLib.LsonString.Parse(System.String)">
            <summary>
                Parses the specified LSON as a LSON string. All other types of LSON values result in a <see cref="T:LsonLib.LsonParseException"/>.</summary>
            <param name="lsonString">
                LSON syntax to parse.</param>
        </member>
        <member name="M:LsonLib.LsonString.TryParse(System.String,LsonLib.LsonString@)">
            <summary>
                Attempts to parse the specified string into a LSON string.</summary>
            <param name="lsonString">
                A string containing LSON syntax.</param>
            <param name="result">
                Receives the <see cref="T:LsonLib.LsonString"/> representing the string, or null if unsuccessful.</param>
            <returns>
                True if parsing was successful; otherwise, false.</returns>
        </member>
        <member name="M:LsonLib.LsonString.op_Implicit(LsonLib.LsonString)~System.String">
            <summary>Converts the specified <see cref="T:LsonLib.LsonString"/> value to an ordinary string.</summary>
        </member>
        <member name="M:LsonLib.LsonString.op_Implicit(System.String)~LsonLib.LsonString">
            <summary>Converts the specified ordinary string to a <see cref="T:LsonLib.LsonString"/> value.</summary>
        </member>
        <member name="M:LsonLib.LsonString.getDouble(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>double</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonString.getDecimal(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>decimal</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonString.getInt(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>int</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonString.getLong(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>long</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonString.getBool(LsonLib.BoolConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>bool</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="F:LsonLib.LsonString.False">
            <summary>
                Controls which string values are converted to <c>false</c> when using <see cref="M:LsonLib.LsonValue.GetBool(LsonLib.BoolConversionOptions)"/> with
                <see cref="F:LsonLib.BoolConversionOptions.AllowConversionFromString"/>.</summary>
            <remarks>
                The default is: <c>{ "", "false", "n", "no", "off", "disable", "disabled", "0" }</c>.</remarks>
        </member>
        <member name="F:LsonLib.LsonString.True">
            <summary>
                Controls which string values are converted to <c>true</c> when using <see cref="M:LsonLib.LsonValue.GetBool(LsonLib.BoolConversionOptions)"/> with <see cref="F:LsonLib.BoolConversionOptions.AllowConversionFromString"/>.</summary>
            <remarks>
                The default is: <c>{ "true", "y", "yes", "on", "enable", "enabled", "1" }</c>.</remarks>
        </member>
        <member name="F:LsonLib.LsonString.TrueFalseComparer">
            <summary>
                Controls which string equality comparer is used when comparing strings against elements in <see cref="F:LsonLib.LsonString.True"/>
                and <see cref="F:LsonLib.LsonString.False"/> during conversion to bool by <see cref="M:LsonLib.LsonValue.GetBool(LsonLib.BoolConversionOptions)"/>.</summary>
            <remarks>
                The default is <see cref="P:System.StringComparer.OrdinalIgnoreCase"/>.</remarks>
        </member>
        <member name="M:LsonLib.LsonString.getString(LsonLib.StringConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>string</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonString.Equals(System.Object)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonString.Equals(LsonLib.LsonValue)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonString.Equals(LsonLib.LsonString)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonString.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:LsonLib.LsonString.ToEnumerable">
            <summary>See <see cref="M:LsonLib.LsonValue.ToEnumerable"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonString.AppendIndented(System.Text.StringBuilder,System.Int32)">
            <summary>Converts the current LSON value to a LSON string that parses back to this value.</summary>
        </member>
        <member name="M:LsonLib.LsonString.ToString">
            <summary>
                Returns a Lua-compatible representation of this string.</summary>
        </member>
        <member name="T:LsonLib.LsonBool">
            <summary>Encapsulates a boolean value as a <see cref="T:LsonLib.LsonValue"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonBool.#ctor(System.Boolean)">
            <summary>Constructs a <see cref="T:LsonLib.LsonBool"/> from the specified boolean.</summary>
        </member>
        <member name="M:LsonLib.LsonBool.Parse(System.String)">
            <summary>
                Parses the specified LSON as a LSON boolean. All other types of LSON values result in a <see cref="T:LsonLib.LsonParseException"/>.</summary>
            <param name="lsonBool">
                LSON syntax to parse.</param>
        </member>
        <member name="M:LsonLib.LsonBool.TryParse(System.String,LsonLib.LsonBool@)">
            <summary>
                Attempts to parse the specified string into a LSON boolean.</summary>
            <param name="lsonBool">
                A string containing LSON syntax.</param>
            <param name="result">
                Receives the <see cref="T:LsonLib.LsonBool"/> representing the boolean, or null if unsuccessful.</param>
            <returns>
                True if parsing was successful; otherwise, false.</returns>
        </member>
        <member name="M:LsonLib.LsonBool.op_Explicit(LsonLib.LsonBool)~System.Boolean">
            <summary>Converts the specified <see cref="T:LsonLib.LsonBool"/> value to an ordinary boolean.</summary>
        </member>
        <member name="M:LsonLib.LsonBool.op_Implicit(LsonLib.LsonBool)~System.Nullable{System.Boolean}">
            <summary>Converts the specified <see cref="T:LsonLib.LsonBool"/> value to a nullable boolean.</summary>
        </member>
        <member name="M:LsonLib.LsonBool.op_Implicit(System.Boolean)~LsonLib.LsonBool">
            <summary>Converts the specified ordinary boolean to a <see cref="T:LsonLib.LsonBool"/> value.</summary>
        </member>
        <member name="M:LsonLib.LsonBool.op_Implicit(System.Nullable{System.Boolean})~LsonLib.LsonBool">
            <summary>Converts the specified nullable boolean to a <see cref="T:LsonLib.LsonBool"/> value or null.</summary>
        </member>
        <member name="M:LsonLib.LsonBool.Equals(System.Object)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonBool.Equals(LsonLib.LsonValue)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonBool.Equals(LsonLib.LsonBool)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonBool.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:LsonLib.LsonBool.ToEnumerable">
            <summary>See <see cref="M:LsonLib.LsonValue.ToEnumerable"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonBool.AppendIndented(System.Text.StringBuilder,System.Int32)">
            <summary>Converts the current LSON value to a LSON string that parses back to this value.</summary>
        </member>
        <member name="M:LsonLib.LsonBool.getBool(LsonLib.BoolConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>bool</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonBool.getDecimal(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>decimal</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonBool.getDouble(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>double</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonBool.getInt(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>int</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonBool.getLong(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>long</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonBool.getString(LsonLib.StringConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>string</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="T:LsonLib.LsonNumber">
            <summary>
                Encapsulates a number, which may be a floating-point number or an integer, as a <see cref="T:LsonLib.LsonValue"/>. See
                Remarks.</summary>
            <remarks>
                LSON does not define any specific limits for numeric values. This implementation supports integers in the signed
                64-bit range, as well as IEEE 64-bit doubles (except NaNs and infinities). Conversions to/from <c>decimal</c> are
                exact for integers, but can be approximate for non-integers, depending on the exact value.</remarks>
        </member>
        <member name="M:LsonLib.LsonNumber.#ctor(System.Double)">
            <summary>Constructs a <see cref="T:LsonLib.LsonNumber"/> from the specified double-precision floating-point number.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.#ctor(System.Int64)">
            <summary>Constructs a <see cref="T:LsonLib.LsonNumber"/> from the specified 64-bit integer.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.#ctor(System.Int32)">
            <summary>Constructs a <see cref="T:LsonLib.LsonNumber"/> from the specified 32-bit integer.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.#ctor(System.Decimal)">
            <summary>
                Constructs a <see cref="T:LsonLib.LsonNumber"/> from the specified decimal. This operation is slightly lossy; see
                Remarks on <see cref="T:LsonLib.LsonNumber"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.Parse(System.String)">
            <summary>
                Parses the specified LSON as a LSON number. All other types of LSON values result in a <see cref="T:LsonLib.LsonParseException"/>.</summary>
            <param name="lsonNumber">
                LSON syntax to parse.</param>
        </member>
        <member name="M:LsonLib.LsonNumber.TryParse(System.String,LsonLib.LsonNumber@)">
            <summary>
                Attempts to parse the specified string into a LSON number.</summary>
            <param name="lsonNumber">
                A string containing LSON syntax.</param>
            <param name="result">
                Receives the <see cref="T:LsonLib.LsonNumber"/> representing the number, or null if unsuccessful.</param>
            <returns>
                True if parsing was successful; otherwise, false.</returns>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Explicit(LsonLib.LsonNumber)~System.Double">
            <summary>Converts the specified <see cref="T:LsonLib.LsonNumber"/> to a double.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Implicit(LsonLib.LsonNumber)~System.Nullable{System.Double}">
            <summary>Converts the specified <see cref="T:LsonLib.LsonNumber"/> to a nullable double.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Explicit(LsonLib.LsonNumber)~System.Decimal">
            <summary>
                Converts the specified <see cref="T:LsonLib.LsonNumber"/> to a decimal. This operator is slightly lossy; see Remarks on
                <see cref="T:LsonLib.LsonNumber"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Explicit(LsonLib.LsonNumber)~System.Nullable{System.Decimal}">
            <summary>
                Converts the specified <see cref="T:LsonLib.LsonNumber"/> to a nullable decimal. This operator is slightly lossy; see
                Remarks on <see cref="T:LsonLib.LsonNumber"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Explicit(LsonLib.LsonNumber)~System.Int64">
            <summary>
                Converts the specified <see cref="T:LsonLib.LsonNumber"/> to a 64-bit integer. See <see cref="F:LsonLib.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Explicit(LsonLib.LsonNumber)~System.Nullable{System.Int64}">
            <summary>
                Converts the specified <see cref="T:LsonLib.LsonNumber"/> to a nullable 64-bit integer. See <see cref="F:LsonLib.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Explicit(LsonLib.LsonNumber)~System.Int32">
            <summary>
                Converts the specified <see cref="T:LsonLib.LsonNumber"/> to a 32-bit integer. See <see cref="F:LsonLib.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Explicit(LsonLib.LsonNumber)~System.Nullable{System.Int32}">
            <summary>
                Converts the specified <see cref="T:LsonLib.LsonNumber"/> to a nullable 32-bit integer. See <see cref="F:LsonLib.NumericConversionOptions.Strict"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Implicit(System.Double)~LsonLib.LsonNumber">
            <summary>Converts the specified double to a <see cref="T:LsonLib.LsonNumber"/> value.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Implicit(System.Nullable{System.Double})~LsonLib.LsonNumber">
            <summary>Converts the specified nullable double to a <see cref="T:LsonLib.LsonNumber"/> value.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Implicit(System.Int64)~LsonLib.LsonNumber">
            <summary>Converts the specified 64-bit integer to a <see cref="T:LsonLib.LsonNumber"/> value.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Implicit(System.Nullable{System.Int64})~LsonLib.LsonNumber">
            <summary>Converts the specified nullable 64-bit integer to a <see cref="T:LsonLib.LsonNumber"/> value.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Implicit(System.Int32)~LsonLib.LsonNumber">
            <summary>Converts the specified 32-bit integer to a <see cref="T:LsonLib.LsonNumber"/> value.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Implicit(System.Nullable{System.Int32})~LsonLib.LsonNumber">
            <summary>Converts the specified nullable 32-bit integer to a <see cref="T:LsonLib.LsonNumber"/> value.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Explicit(System.Decimal)~LsonLib.LsonNumber">
            <summary>
                Converts the specified decimal to a <see cref="T:LsonLib.LsonNumber"/> value. This operator is slightly lossy; see
                Remarks on <see cref="T:LsonLib.LsonNumber"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.op_Explicit(System.Nullable{System.Decimal})~LsonLib.LsonNumber">
            <summary>
                Converts the specified nullable decimal to a <see cref="T:LsonLib.LsonNumber"/> value. This operator is slightly lossy;
                see Remarks on <see cref="T:LsonLib.LsonNumber"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.getDouble(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>double</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonNumber.getDecimal(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>decimal</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonNumber.getInt(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>int</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonNumber.getLong(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>long</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonNumber.getString(LsonLib.StringConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>string</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonNumber.getBool(LsonLib.BoolConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>bool</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonNumber.Equals(System.Object)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.Equals(LsonLib.LsonValue)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.Equals(LsonLib.LsonNumber)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.ToEnumerable">
            <summary>See <see cref="M:LsonLib.LsonValue.ToEnumerable"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNumber.AppendIndented(System.Text.StringBuilder,System.Int32)">
            <summary>Converts the current LSON value to a LSON string that parses back to this value.</summary>
        </member>
        <member name="P:LsonLib.LsonNumber.RawValue">
            <summary>Returns the value of this number as either a <c>double</c> or a <c>long</c>.</summary>
        </member>
        <member name="T:LsonLib.LsonNoValue">
            <summary>
                Represents a non-value when looking up a non-existent index or key in a dictionary.</summary>
            <remarks>
                <list type="bullet">
                    <item><description>
                        This is a singleton class; use <see cref="P:LsonLib.LsonNoValue.Instance"/> to access it.</description></item>
                    <item><description>
                        This class overloads the <c>==</c> operator such that comparing with <c>null</c> returns <c>true</c>.</description></item></list></remarks>
        </member>
        <member name="M:LsonLib.LsonNoValue.Equals(System.Object)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNoValue.Equals(LsonLib.LsonValue)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNoValue.Equals(LsonLib.LsonNoValue)">
            <summary>See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNoValue.op_Equality(LsonLib.LsonNoValue,LsonLib.LsonNoValue)">
            <summary>
                Always returns true.</summary>
            <remarks>
                <para>
                    This operator can only be invoked in three ways:</para>
                <list type="bullet">
                    <item><description>
                        <c>LsonNoValue.Instance == LsonNoValue.Instance</c></description></item>
                    <item><description>
                        <c>LsonNoValue.Instance == null</c></description></item>
                    <item><description>
                        <c>null == LsonNoValue.Instance</c></description></item></list>
                <para>
                    In all three cases, the intended comparison is <c>true</c>.</para></remarks>
        </member>
        <member name="M:LsonLib.LsonNoValue.op_Inequality(LsonLib.LsonNoValue,LsonLib.LsonNoValue)">
            <summary>
                Always returns false.</summary>
            <seealso cref="M:LsonLib.LsonNoValue.op_Equality(LsonLib.LsonNoValue,LsonLib.LsonNoValue)"/>
        </member>
        <member name="M:LsonLib.LsonNoValue.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:LsonLib.LsonNoValue.ToEnumerable">
            <summary>See <see cref="M:LsonLib.LsonValue.ToEnumerable"/>.</summary>
        </member>
        <member name="M:LsonLib.LsonNoValue.AppendIndented(System.Text.StringBuilder,System.Int32)">
            <summary>Converts the current LSON value to a LSON string that parses back to this value.</summary>
        </member>
        <member name="M:LsonLib.LsonNoValue.getBool(LsonLib.BoolConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>bool</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonNoValue.getDecimal(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>decimal</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonNoValue.getDouble(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>double</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonNoValue.getInt(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>int</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonNoValue.getLong(LsonLib.NumericConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>long</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="M:LsonLib.LsonNoValue.getString(LsonLib.StringConversionOptions,System.Boolean)">
            <summary>
                Converts the current value to <c>string</c>.</summary>
            <param name="options">
                Specifies options for the conversion.</param>
            <param name="safe">
                Controls the behavior in case of conversion failure. If true, returns null; if false, throws.</param>
        </member>
        <member name="P:LsonLib.LsonNoValue.Instance">
            <summary>Returns the singleton instance of this type.</summary>
        </member>
        <member name="T:LsonLib.LsonSafeValue">
            <summary>
                Provides safe access to the indexers of a <see cref="T:LsonLib.LsonValue"/>. See <see cref="P:LsonLib.LsonValue.Safe"/> for details.</summary>
        </member>
        <member name="M:LsonLib.LsonSafeValue.#ctor(LsonLib.LsonValue)">
            <summary>
                Constructor.</summary>
            <param name="value">
                Specifies the underlying LSON value to provide safe access to.</param>
        </member>
        <member name="M:LsonLib.LsonSafeValue.GetHashCode">
            <summary>Returns a hash code representing this object.</summary>
        </member>
        <member name="M:LsonLib.LsonSafeValue.Equals(System.Object)">
            <summary>Determines whether the specified instance is equal to this one.</summary>
        </member>
        <member name="M:LsonLib.LsonSafeValue.Equals(LsonLib.LsonSafeValue)">
            <summary>
                Determines whether the specified instance is equal to this one. (See remarks.)</summary>
            <remarks>
                Two instances of <see cref="T:LsonLib.LsonSafeValue"/> are considered equal if the underlying values are equal. See <see cref="M:LsonLib.LsonValue.Equals(LsonLib.LsonValue)"/> for details.</remarks>
        </member>
        <member name="P:LsonLib.LsonSafeValue.Value">
            <summary>Gets the underlying LSON value associated with this object.</summary>
        </member>
        <member name="P:LsonLib.LsonSafeValue.Item(System.String)">
            <summary>
                If the underlying value is a dictionary, and the specified <paramref name="key"/> exists within the
                dictionary, gets the value associated with that key; otherwise, returns a <see cref="T:LsonLib.LsonNoValue"/> instance.</summary>
        </member>
        <member name="T:LsonLib.LsonExtensions">
            <summary>Provides extension methods for the LSON types.</summary>
        </member>
        <member name="M:LsonLib.LsonExtensions.ToLsonDict``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Func{``0,LsonLib.LsonValue})">
            <summary>
                Creates a <see cref="T:LsonLib.LsonDict"/> from an input collection.</summary>
            <typeparam name="T">
                Type of the input collection.</typeparam>
            <param name="source">
                Input collection.</param>
            <param name="keySelector">
                Function to map each input element to a key for the resulting dictionary.</param>
            <param name="valueSelector">
                Function to map each input element to a value for the resulting dictionary.</param>
            <returns>
                The constructed <see cref="T:LsonLib.LsonDict"/>.</returns>
        </member>
        <member name="T:LsonLib.OffsetToLineCol">
            <summary>
            Encapsulates a class that offers efficient conversion of a string offset into line/column number. The class
            is best suited for multiple lookups on a single fixed string, and is suboptimal for single lookups into many
            different strings. All common newline styles are supported.
            </summary>
        </member>
        <member name="M:LsonLib.OffsetToLineCol.#ctor(System.String)">
            <summary>Constructor: precomputes certain information to enable efficient lookups.</summary>
            <param name="input">The string on which the lookups will be performed.</param>
        </member>
        <member name="M:LsonLib.OffsetToLineCol.GetLine(System.Int32)">
            <summary>Gets the number of the line containing the character at the specified offset.</summary>
            <param name="offset">Offset of the character in question.</param>
            <returns>The number of the line containing the specified character (first line is number 1).</returns>
        </member>
        <member name="M:LsonLib.OffsetToLineCol.GetColumn(System.Int32)">
            <summary>Gets the number of the column containing the character at the specified offset.</summary>
            <param name="offset">Offset of the character in question.</param>
            <returns>The number of the column containing the specified character (first column is number 1).</returns>
        </member>
        <member name="M:LsonLib.OffsetToLineCol.GetLineAndColumn(System.Int32,System.Int32@,System.Int32@)">
            <summary>Gets the numbers of the line and column containing the character at the specified offset.</summary>
            <param name="offset">Offset of the character in question.</param>
            <param name="line">The number of the line containing the specified character (first line is number 1).</param>
            <param name="column">The number of the column containing the specified character (first column is number 1).</param>
        </member>
        <member name="M:LsonLib.Private.Ut.Throw``1(System.Exception)">
            <summary>
                Throws the specified exception.</summary>
            <typeparam name="TResult">
                The type to return.</typeparam>
            <param name="exception">
                The exception to throw.</param>
            <returns>
                This method never returns a value. It always throws.</returns>
        </member>
        <member name="M:LsonLib.Private.Ut.Fmt(System.String,System.Object[])">
            <summary>Formats a string in a way compatible with <see cref="M:System.String.Format(System.String,System.Object[])"/>.</summary>
        </member>
        <member name="M:LsonLib.Private.Ut.SubstringSafe(System.String,System.Int32)">
            <summary>
                Same as <see cref="M:System.String.Substring(System.Int32)"/> but does not throw exceptions when the start index falls outside
                the boundaries of the string. Instead the result is truncated as appropriate.</summary>
        </member>
        <member name="M:LsonLib.Private.Ut.SubstringSafe(System.String,System.Int32,System.Int32)">
            <summary>
                Same as <see cref="M:System.String.Substring(System.Int32,System.Int32)"/> but does not throw exceptions when the start index or length
                (or both) fall outside the boundaries of the string. Instead the result is truncated as appropriate.</summary>
        </member>
    </members>
</doc>
